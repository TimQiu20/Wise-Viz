{"ast":null,"code":"var React = require('react'),\n    ReactDOM = require('react-dom'),\n    PropTypes = require('prop-types'),\n    EventListener = require('fbjs/lib/EventListener'),\n    getEventTarget = require('./getEventTarget'),\n    pathToRegexp = require('path-to-regexp'),\n    urllite = require('urllite/lib/core'),\n    detect = require('./detect');\n\nvar PropValidation = {\n  path: PropTypes.string,\n  root: PropTypes.string,\n  useHistory: PropTypes.bool\n};\nmodule.exports = {\n  propTypes: PropValidation,\n  contextTypes: PropValidation,\n  childContextTypes: PropValidation,\n  getChildContext: function getChildContext() {\n    return {\n      path: this.state.path,\n      root: this.state.root,\n      useHistory: this.state.useHistory\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      routes: {}\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      path: getInitialPath(this),\n      root: this.props.root || this.context.path || '',\n      useHistory: (this.props.history || this.context.useHistory) && detect.hasPushState\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this.setState({\n      _routes: processRoutes(this.state.root, this.routes, this)\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    var _events = this._events = [];\n\n    _events.push(EventListener.listen(ReactDOM.findDOMNode(this), 'click', this.handleClick));\n\n    if (this.state.useHistory) {\n      _events.push(EventListener.listen(window, 'popstate', this.onPopState));\n    } else {\n      if (window.location.hash.indexOf('#!') === -1) {\n        window.location.hash = '#!/';\n      }\n\n      _events.push(EventListener.listen(window, 'hashchange', this.onPopState));\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this._events.forEach(function (listener) {\n      listener.remove();\n    });\n  },\n  onPopState: function onPopState() {\n    var url = urllite(window.location.href),\n        hash = url.hash || '',\n        path = this.state.useHistory ? url.pathname : hash.slice(2);\n    if (path.length === 0) path = '/';\n    this.setState({\n      path: path + url.search\n    });\n  },\n  renderCurrentRoute: function renderCurrentRoute() {\n    var path = this.state.path,\n        url = urllite(path),\n        queryParams = parseSearch(url.search);\n    var parsedPath = url.pathname;\n    if (!parsedPath || parsedPath.length === 0) parsedPath = '/';\n    var matchedRoute = this.matchRoute(parsedPath);\n\n    if (matchedRoute) {\n      return matchedRoute.handler.apply(this, matchedRoute.params.concat(queryParams));\n    } else if (this.notFound) {\n      return this.notFound(parsedPath, queryParams);\n    } else {\n      throw new Error('No route matched path: ' + parsedPath);\n    }\n  },\n  handleClick: function handleClick(evt) {\n    var self = this,\n        url = getHref(evt);\n\n    if (url && self.matchRoute(url.pathname)) {\n      if (evt.preventDefault) {\n        evt.preventDefault();\n      } else {\n        evt.returnValue = false;\n      } // See: http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html\n      // Give any component event listeners a chance to fire in the current event loop,\n      // since they happen at the end of the bubbling phase. (Allows an onClick prop to\n      // work correctly on the event target <a/> component.)\n\n\n      setTimeout(function () {\n        var pathWithSearch = url.pathname + (url.search || '');\n        if (pathWithSearch.length === 0) pathWithSearch = '/';\n\n        if (self.state.useHistory) {\n          window.history.pushState({}, '', pathWithSearch);\n        } else {\n          window.location.hash = '!' + pathWithSearch;\n        }\n\n        self.setState({\n          path: pathWithSearch\n        });\n      }, 0);\n    }\n  },\n  matchRoute: function matchRoute(path) {\n    if (!path) {\n      return false;\n    }\n\n    var matchedRoute = {};\n\n    this.state._routes.some(function (route) {\n      var matches = route.pattern.exec(path);\n\n      if (matches) {\n        matchedRoute.handler = route.handler;\n        matchedRoute.params = matches.slice(1, route.params.length + 1);\n        return true;\n      }\n\n      return false;\n    });\n\n    return matchedRoute.handler ? matchedRoute : false;\n  }\n};\n\nfunction getInitialPath(component) {\n  var path = component.props.path || component.context.path,\n      hash,\n      url;\n\n  if (!path && detect.canUseDOM) {\n    url = urllite(window.location.href);\n\n    if (component.props.history) {\n      path = url.pathname + url.search;\n    } else if (url.hash) {\n      hash = urllite(url.hash.slice(2));\n      path = hash.pathname + hash.search;\n    }\n  }\n\n  return path || '/';\n}\n\nfunction getHref(evt) {\n  if (evt.defaultPrevented) {\n    return;\n  }\n\n  if (evt.metaKey || evt.ctrlKey || evt.shiftKey) {\n    return;\n  }\n\n  if (evt.button !== 0) {\n    return;\n  }\n\n  var elt = getEventTarget(evt); // Since a click could originate from a child element of the <a> tag,\n  // walk back up the tree to find it.\n\n  while (elt && elt.nodeName !== 'A') {\n    elt = elt.parentNode;\n  }\n\n  if (!elt) {\n    return;\n  }\n\n  if (elt.target && elt.target !== '_self') {\n    return;\n  }\n\n  if (!!elt.attributes.download) {\n    return;\n  }\n\n  var linkURL = urllite(elt.href);\n  var windowURL = urllite(window.location.href);\n\n  if (linkURL.protocol !== windowURL.protocol || linkURL.host !== windowURL.host) {\n    return;\n  }\n\n  return linkURL;\n}\n\nfunction processRoutes(root, routes, component) {\n  var patterns = [],\n      path,\n      pattern,\n      keys,\n      handler,\n      handlerFn;\n\n  for (path in routes) {\n    if (routes.hasOwnProperty(path)) {\n      keys = [];\n      pattern = pathToRegexp(root + path, keys);\n      handler = routes[path];\n      handlerFn = component[handler];\n      patterns.push({\n        pattern: pattern,\n        params: keys,\n        handler: handlerFn\n      });\n    }\n  }\n\n  return patterns;\n}\n\nfunction parseSearch(str) {\n  var parsed = {};\n  if (str.indexOf('?') === 0) str = str.slice(1);\n  var pairs = str.split('&');\n  pairs.forEach(function (pair) {\n    var keyVal = pair.split('=');\n    parsed[decodeURIComponent(keyVal[0])] = decodeURIComponent(keyVal[1]);\n  });\n  return parsed;\n}","map":null,"metadata":{},"sourceType":"script"}