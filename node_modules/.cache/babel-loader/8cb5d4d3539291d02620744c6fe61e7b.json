{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\src\\\\components\\\\Comments.js\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport './component_style/PostContent.css';\nimport ChangePageView from './ChangePage';\nimport { navigate } from 'react-mini-router';\nimport Moment from 'react-moment';\nexport default class Comments extends React.Component {\n  ChangeView(page) {\n    navigate(page);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: this.props.clickedPost,\n      hasTable: this.props.clickedPost.comment,\n      comments: [],\n      numOfComments: 0,\n      currentPage: 1,\n      numOfPages: 0,\n      currentShownComments: [],\n      buttons: []\n    };\n    this.getComments = this.getComments.bind(this);\n    this.getPageButtons = this.getPageButtons.bind(this);\n    this.updateCurrentComments = this.updateCurrentComments.bind(this);\n    this.updataComments = this.updataComments.bind(this);\n    this.changePageChild = React.createRef();\n    this.commentPost = this.commentPost.bind(this);\n    this.getRelativeTime = this.getRelativeTime.bind(this);\n    this.deleteComment = this.deleteComment.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.hasTable) {\n      this.getComments();\n    }\n  }\n\n  deleteComment(commentID) {\n    let data = {\n      commentID: commentID,\n      postID: this.state.post.postID\n    };\n    let request = new Request('/api/comment-info/delete', {\n      method: 'DELETE',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(data)\n    });\n    fetch(request).then(response => response.json()).then(() => this.getComments()).then(() => this.ChangeView('/postContent'));\n  }\n\n  getComments() {\n    let data = {\n      id: this.state.post.postID\n    };\n    let request = new Request('api/comment-info/get', {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(data)\n    });\n    fetch(request).then(response => response.json()).then(items => this.setState({\n      comments: items\n    })).then(() => {\n      let numOfComments = this.state.comments.length;\n      let numOfPages = Math.ceil(numOfComments / 6);\n\n      if (numOfPages === 0) {\n        numOfPages = 1;\n      }\n\n      let currentShownComments = [];\n\n      for (let i = 6 * (this.state.currentPage - 1); i < 6 * this.state.currentPage && i < numOfComments; i++) {\n        let comment = this.state.comments[i];\n        currentShownComments[i] = comment;\n      }\n\n      this.setState({\n        numOfComments: numOfComments,\n        numOfPages: numOfPages,\n        currentShownComments: currentShownComments\n      });\n      this.getPageButtons();\n    });\n  }\n\n  updataComments(b) {\n    let currentShownComments = [];\n\n    for (let i = 6 * (b - 1); i < 6 * b && i < this.state.numOfComments; i++) {\n      let comment = this.state.comments[i];\n      currentShownComments[i] = comment;\n    }\n\n    this.setState({\n      currentShownComments: currentShownComments\n    });\n    this.getPageButtons(b);\n  }\n\n  updateCurrentComments(b) {\n    this.setState({\n      currentPage: b\n    });\n    this.updataComments(b);\n  }\n\n  getPageButtons(b) {\n    if (b == null) {\n      b = 1;\n    }\n\n    let totalPages = this.state.numOfPages;\n    let currentPage = b;\n    let buttons = [];\n    buttons[0] = 1;\n    let index = 1;\n\n    for (let i = currentPage - 2 > 1 ? currentPage - 2 : 2; i <= currentPage + 2 && i <= totalPages; i++) {\n      if (buttons[index - 1] + 1 !== i) {\n        buttons[index] = '...';\n        index++;\n      }\n\n      buttons[index] = i;\n      index++;\n    }\n\n    if (buttons[index - 1] !== totalPages) {\n      if (buttons[index - 1] !== totalPages - 1) {\n        buttons[index] = '...';\n        buttons[index + 1] = totalPages;\n      } else {\n        buttons[index] = totalPages;\n      }\n    }\n\n    this.setState({\n      buttons: buttons\n    });\n  }\n\n  commentPost() {\n    if (this.props.user) {\n      if (!this.state.hasTable) {\n        let data = {\n          id: this.state.post.postID\n        };\n        let request = new Request('/api/comment-info/create-table', {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify(data)\n        });\n        fetch(request).then(response => response.json());\n      }\n\n      let tempPost = this.state.post;\n      tempPost.comment = true;\n      this.props.updateClickedPost(tempPost);\n      this.props.reverseState();\n    } else {\n      this.ChangeView('/login');\n    }\n  }\n\n  getRelativeTime(time) {\n    if (time) {\n      let temp = time.split(' ');\n      return temp[0] + \"T\" + temp[1] + \"-0000\";\n    } else {\n      return '';\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"commentHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Comments:\"), React.createElement(Button, {\n      className: \"commentBtn\",\n      onClick: () => this.commentPost(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Post Comment\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"grid\",\n      method: \"post\",\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(ChangePageView, {\n      ref: this.changePageChild,\n      choosePage: this.updateCurrentComments,\n      totalPages: this.state.numOfPages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), this.state.currentShownComments.map((comment, index) => React.createElement(\"article\", {\n      className: \"postArticle\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      className: \"postFieldset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"commentsLayout\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"postProfile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"userInfoP\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, comment.user, \" |  \", React.createElement(Moment, {\n      fromNow: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.getRelativeTime(comment.time))), (this.props.user ? this.props.user.username : '') === comment.user && React.createElement(Button, {\n      className: \"deleteBtn\",\n      onClick: () => this.deleteComment(comment.commentID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Delete\")), React.createElement(\"hr\", {\n      className: \"hr\",\n      width: \"100%\",\n      color: \"#7986cb\",\n      size: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"postContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, comment.content))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"pageButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, this.state.buttons.map((b, index) => {\n      if (b === this.state.currentPage) {\n        return React.createElement(Button, {\n          className: \"currentPageButton\",\n          key: index,\n          num: b,\n          variant: \"contained\",\n          onClick: () => this.updateCurrentComments(b),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, b);\n      } else if (b === '...') {\n        return React.createElement(Button, {\n          className: \"pageButton\",\n          key: index,\n          num: b,\n          variant: \"contained\",\n          onClick: () => this.changePageChild.current.handleOpen(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, b);\n      } else {\n        return React.createElement(Button, {\n          className: \"pageButton\",\n          key: index,\n          num: b,\n          variant: \"contained\",\n          onClick: () => this.updateCurrentComments(b),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, b);\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Ting\\Desktop\\job seeking\\my-app\\src\\components\\Comments.js"],"names":["React","Button","ChangePageView","navigate","Moment","Comments","Component","ChangeView","page","constructor","props","state","post","clickedPost","hasTable","comment","comments","numOfComments","currentPage","numOfPages","currentShownComments","buttons","getComments","bind","getPageButtons","updateCurrentComments","updataComments","changePageChild","createRef","commentPost","getRelativeTime","deleteComment","componentDidMount","commentID","data","postID","request","Request","method","headers","Headers","body","JSON","stringify","fetch","then","response","json","id","items","setState","length","Math","ceil","i","b","totalPages","index","user","tempPost","updateClickedPost","reverseState","time","temp","split","render","map","username","content","current","handleOpen"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport './component_style/PostContent.css';\nimport ChangePageView from './ChangePage';\nimport { navigate } from 'react-mini-router';\nimport Moment from 'react-moment';\n\nexport default class Comments extends React.Component {\n    ChangeView(page) {\n        navigate(page);\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            post: this.props.clickedPost,\n            hasTable: this.props.clickedPost.comment,\n            comments: [],\n            numOfComments: 0,\n            currentPage: 1,\n            numOfPages: 0,\n            currentShownComments: [],\n            buttons: [],\n        }\n        this.getComments = this.getComments.bind(this);\n        this.getPageButtons = this.getPageButtons.bind(this);\n        this.updateCurrentComments = this.updateCurrentComments.bind(this);\n        this.updataComments = this.updataComments.bind(this);\n        this.changePageChild = React.createRef();\n        this.commentPost = this.commentPost.bind(this);\n        this.getRelativeTime = this.getRelativeTime.bind(this);\n        this.deleteComment = this.deleteComment.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.state.hasTable) {\n            this.getComments();\n        }\n    }\n\n    deleteComment(commentID) {\n        let data = {\n            commentID: commentID,\n            postID: this.state.post.postID\n        }\n        let request = new Request('/api/comment-info/delete', {\n            method: 'DELETE',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n        fetch(request)\n            .then(response => response.json())\n            .then(() => this.getComments())\n            .then(() => this.ChangeView('/postContent'));\n    }\n\n    getComments() {\n        let data = { id:this.state.post.postID };\n        let request = new Request('api/comment-info/get', {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n        fetch(request)\n                .then(response => response.json())\n                .then(items => this.setState({ comments:items }))\n                .then(() => {\n                    let numOfComments = this.state.comments.length;\n                    let numOfPages = Math.ceil(numOfComments / 6);\n                    if (numOfPages === 0) {\n                        numOfPages = 1;\n                    }\n                    let currentShownComments = [];\n                    for (let i = 6 * (this.state.currentPage - 1); i < 6 * this.state.currentPage && i < numOfComments; i++) {\n                        let comment = this.state.comments[i];\n                        currentShownComments[i] = comment;\n                    }\n                    this.setState({\n                        numOfComments: numOfComments,\n                        numOfPages: numOfPages,\n                        currentShownComments: currentShownComments,\n                    });\n                    this.getPageButtons();\n                });\n    }\n\n    updataComments(b) {\n        let currentShownComments = [];\n        for (let i = 6 * (b - 1); i < 6 * b && i < this.state.numOfComments; i++) {\n            let comment = this.state.comments[i];\n            currentShownComments[i] = comment;\n        }\n        this.setState({\n            currentShownComments: currentShownComments,\n        });\n        this.getPageButtons(b);\n    }\n\n    updateCurrentComments(b) {\n        this.setState({ currentPage:b });\n        this.updataComments(b);\n    }\n\n    getPageButtons(b) {\n        if (b == null) {\n            b = 1;\n        }\n        let totalPages = this.state.numOfPages;\n        let currentPage = b;\n        let buttons = [];\n        buttons[0] = 1;\n        let index = 1;\n        for (let i = currentPage - 2 > 1 ? currentPage - 2 : 2 ; i <= currentPage + 2 && i <= totalPages; i++) {\n            if (buttons[index - 1] + 1 !== i) {\n                buttons[index] = '...';\n                index++;\n            }\n            buttons[index] = i;\n            index++;\n        }\n        if (buttons[index - 1] !== totalPages) {\n            if (buttons[index - 1] !== totalPages - 1) {\n                buttons[index] = '...';\n                buttons[index + 1] = totalPages;\n            } else {\n                buttons[index] = totalPages;\n            }\n        }\n        this.setState({ buttons:buttons });\n    }\n\n    commentPost() {\n        if (this.props.user) {\n            if (!this.state.hasTable) {\n                let data = { id:this.state.post.postID };\n                let request = new Request('/api/comment-info/create-table', {\n                    method: 'POST',\n                    headers: new Headers({ 'Content-Type': 'application/json' }),\n                    body: JSON.stringify(data)\n                });\n                fetch(request)\n                    .then(response => response.json());\n            }\n            let tempPost = this.state.post;\n            tempPost.comment = true;\n            this.props.updateClickedPost(tempPost);\n            this.props.reverseState();\n        } else {\n            this.ChangeView('/login');\n        }\n    }\n\n    getRelativeTime(time) {\n        if (time) {\n            let temp = time.split(' ');\n            return temp[0] + \"T\" + temp[1] + \"-0000\";\n        } else {\n            return '';\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <br />\n                <div>\n                    <h2 className=\"commentHeader\">Comments:</h2>\n                    <Button className=\"commentBtn\" onClick={() => this.commentPost()}>Post Comment</Button>\n                    <br /> <br />\n                    <form className=\"grid\" method=\"post\" action=\"\">\n                        <br/>\n                        <ChangePageView ref={this.changePageChild} choosePage={this.updateCurrentComments} totalPages={this.state.numOfPages} />\n                        {this.state.currentShownComments.map((comment, index) => (\n                            <article className=\"postArticle\" key={index}>\n                                <fieldset className=\"postFieldset\">\n                                    <div className=\"commentsLayout\">\n                                        <div className=\"postProfile\">\n                                            <p className=\"userInfoP\">{comment.user} |  <Moment fromNow>{this.getRelativeTime(comment.time)}</Moment></p>\n                                            { (this.props.user ? this.props.user.username : '') === comment.user && (\n                                                <Button className=\"deleteBtn\" onClick={() => this.deleteComment(comment.commentID)}>Delete</Button>\n                                            )}\n                                        </div>\n                                        <hr className=\"hr\" width=\"100%\" color=\"#7986cb\" size={3} />\n                                        <p className=\"postContent\">{comment.content}</p>\n                                    </div>\n                                </fieldset>\n                                <br/>\n                            </article>\n                        ))}\n                    </form>\n                    <div className=\"pageButtons\">\n                        {this.state.buttons.map((b, index) => {\n                            if (b === this.state.currentPage) {\n                                return (<Button className=\"currentPageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.updateCurrentComments(b)}>{b}</Button>)\n                            }\n                            else if (b === '...') {\n                                return (<Button className=\"pageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.changePageChild.current.handleOpen()}>{b}</Button>)\n                            }\n                            else {\n                                return (<Button className=\"pageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.updateCurrentComments(b)}>{b}</Button>)\n                            }\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}