{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\src\\\\components\\\\Register.js\";\nimport React from 'react';\nimport { IconButton, Button, TextField } from '@material-ui/core';\nimport './component_style/Register.css';\nimport { navigate } from 'react-mini-router';\nimport InvalidNewUserView from './InvalidNewUserError';\nimport RegisterSucceedView from './RegisterSucceed';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n/**\n *\n *\n */\n\nexport default class Register extends React.Component {\n  ChangeView(page) {\n    navigate(page);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.handleEventChange = field => event => {\n      const oldData = this.state.newUserData;\n      oldData[field] = event.target.value;\n      this.setState({\n        newUserData: oldData\n      });\n    };\n\n    this.handleClickShowPassword = () => {\n      this.setState({\n        showPassword: !this.state.showPassword\n      });\n    };\n\n    this.state = {\n      newUserData: {\n        userName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        erroInfo: ''\n      },\n      items: [],\n      showPassword: false\n    };\n    this.addNewAccount = this.addNewAccount.bind(this);\n    this.checkUserInfoAndAdd = this.checkUserInfoAndAdd.bind(this);\n    this.existUsername = this.existUsername.bind(this);\n    this.existEmail = this.existEmail.bind(this);\n    this.invalidNewUserErrorChild = React.createRef();\n    this.registerSucceedChild = React.createRef();\n  }\n\n  componentDidMount() {} // go to database to check whether the account has been registered and\n  // go to check whether the password and reentered password are same\n  // if the new account information are all valid, then put the info into DB.\n\n\n  checkUserInfoAndAdd() {\n    let data = {\n      userName: this.state.newUserData.userName,\n      email: this.state.newUserData.email\n    };\n    let request = new Request('api/user-info/check-username-email-unique', {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(data)\n    });\n    fetch(request).then(response => response.json()).then(items => this.setState({\n      items\n    })).then(event => {\n      let data = {\n        userID: Math.random().toString(36).substr(2, 9),\n        userName: this.state.newUserData.userName,\n        password: this.state.newUserData.password,\n        email: this.state.newUserData.email.toLowerCase()\n      };\n      let confirmPassword = this.state.newUserData.confirmPassword;\n\n      if (confirmPassword === data.password && !this.existUsername(data.userName) && !this.existEmail(data.email)) {\n        let request = new Request('api/user-info/post', {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify(data)\n        });\n        fetch(request).then(function (response) {\n          response.json().then(function (data) {});\n        });\n        this.registerSucceedChild.current.handleOpen();\n      } else {\n        let erroInfo = '';\n\n        if (data.userName === '') {\n          erroInfo = 'Username cannot be empty!';\n        } else if (this.existUsername(data.userName)) {\n          erroInfo = 'The username is registered by the other person!';\n        } else if (this.existEmail(data.email)) {\n          erroInfo = 'The email is used by the other person!';\n        } else if (data.password !== data.confirmPassword) {\n          erroInfo = 'The password and the reentered Password are different!';\n        }\n\n        this.setState({\n          newUserData: {\n            userName: data.userName,\n            password: data.password,\n            confirmPassword: confirmPassword,\n            email: data.email,\n            erroInfo: erroInfo\n          }\n        });\n        this.invalidNewUserErrorChild.current.handleOpen();\n        this.setState({\n          newUserData: {\n            userName: '',\n            password: '',\n            confirmPassword: '',\n            email: '',\n            erroInfo: this.state.newUserData.erroInfo\n          }\n        });\n      }\n    }).catch(err => console.log(err));\n  }\n\n  existUsername(username) {\n    let exist = false;\n\n    for (let itemInd in this.state.items) {\n      let each = this.state.items[itemInd];\n\n      if (each.userName === username) {\n        exist = true;\n      }\n    }\n\n    return exist;\n  }\n\n  existEmail(email) {\n    let exist = false;\n\n    for (let itemInd in this.state.items) {\n      let each = this.state.items[itemInd];\n\n      if (each.email === email) {\n        exist = true;\n      }\n    }\n\n    return exist;\n  }\n\n  addNewAccount(event) {\n    event.preventDefault();\n    this.checkUserInfoAndAdd();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"newUser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(InvalidNewUserView, {\n      ref: this.invalidNewUserErrorChild,\n      errInfo: this.state.newUserData.erroInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(RegisterSucceedView, {\n      ref: this.registerSucceedChild,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"title\",\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"New User\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"eventForm\",\n      onSubmit: this.addNewAccount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      label: \"User Name\",\n      margin: \"dense\",\n      className: \"registerText\",\n      value: this.state.newUserData.userName,\n      onChange: this.handleEventChange('userName'),\n      InputLabelProps: {\n        shrink: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      label: \"Email\",\n      margin: \"dense\",\n      className: \"registerText\",\n      type: \"email\",\n      value: this.state.newUserData.email,\n      onChange: this.handleEventChange('email'),\n      InputLabelProps: {\n        shrink: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      label: \"Password\",\n      type: this.state.showPassword ? 'text' : 'password',\n      margin: \"dense\",\n      className: \"registerText\",\n      value: this.state.newUserData.password,\n      onChange: this.handleEventChange('password'),\n      InputLabelProps: {\n        shrink: true\n      },\n      InputProps: {\n        endAdornment: React.createElement(InputAdornment, {\n          position: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"Toggle password visibility\",\n          onClick: this.handleClickShowPassword,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, this.state.showPassword ? React.createElement(VisibilityOff, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }) : React.createElement(Visibility, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        })))\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      label: \"Confirm Password\",\n      type: this.state.showPassword ? 'text' : 'password',\n      margin: \"dense\",\n      className: \"registerText\",\n      value: this.state.newUserData.confirmPassword,\n      onChange: this.handleEventChange('confirmPassword'),\n      InputLabelProps: {\n        shrink: true\n      },\n      InputProps: {\n        endAdornment: React.createElement(InputAdornment, {\n          position: \"end\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          edge: \"end\",\n          \"aria-label\": \"Toggle password visibility\",\n          onClick: this.handleClickShowPassword,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, this.state.showPassword ? React.createElement(VisibilityOff, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }) : React.createElement(Visibility, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        })))\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      className: \"buttons\",\n      type: \"button\",\n      onClick: () => this.ChangeView('/'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      variant: \"contained\",\n      className: \"buttons\",\n      type: \"submit\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Ting\\Desktop\\job seeking\\my-app\\src\\components\\Register.js"],"names":["React","IconButton","Button","TextField","navigate","InvalidNewUserView","RegisterSucceedView","InputAdornment","Visibility","VisibilityOff","Register","Component","ChangeView","page","constructor","props","handleEventChange","field","event","oldData","state","newUserData","target","value","setState","handleClickShowPassword","showPassword","userName","email","password","confirmPassword","erroInfo","items","addNewAccount","bind","checkUserInfoAndAdd","existUsername","existEmail","invalidNewUserErrorChild","createRef","registerSucceedChild","componentDidMount","data","request","Request","method","headers","Headers","body","JSON","stringify","fetch","then","response","json","userID","Math","random","toString","substr","toLowerCase","current","handleOpen","catch","err","console","log","username","exist","itemInd","each","preventDefault","render","shrink","endAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IconButton, Button, TextField } from '@material-ui/core';\nimport './component_style/Register.css';\nimport { navigate } from 'react-mini-router';\nimport InvalidNewUserView from './InvalidNewUserError';\nimport RegisterSucceedView from './RegisterSucceed';\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\n/**\n *\n *\n */\nexport default class Register extends React.Component {\n    ChangeView(page) {\n        navigate(page);\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            newUserData: {\n                userName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                erroInfo: ''\n            },\n            items: [],\n            showPassword: false,\n        };\n        this.addNewAccount = this.addNewAccount.bind(this);\n        this.checkUserInfoAndAdd = this.checkUserInfoAndAdd.bind(this);\n        this.existUsername = this.existUsername.bind(this);\n        this.existEmail = this.existEmail.bind(this);\n        this.invalidNewUserErrorChild = React.createRef();\n        this.registerSucceedChild = React.createRef();\n    }\n\n    handleEventChange = field => event => {\n        const oldData = this.state.newUserData;\n        oldData[field] = event.target.value;\n        this.setState({\n            newUserData: oldData,\n        });\n    }\n\n    handleClickShowPassword = () => {\n        this.setState({ showPassword: !this.state.showPassword });\n    };\n\n    componentDidMount() {\n    }\n\n    // go to database to check whether the account has been registered and\n    // go to check whether the password and reentered password are same\n    // if the new account information are all valid, then put the info into DB.\n    checkUserInfoAndAdd() {\n        let data = {\n            userName: this.state.newUserData.userName,\n            email: this.state.newUserData.email\n        };\n        let request = new Request('api/user-info/check-username-email-unique', {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n        fetch(request)\n            .then(response => response.json())\n            .then(items => this.setState({items}))\n            .then((event) => {\n                let data = {\n                    userID: Math.random().toString(36).substr(2, 9),\n                    userName: this.state.newUserData.userName,\n                    password: this.state.newUserData.password,\n                    email: this.state.newUserData.email.toLowerCase(),\n                };\n                let confirmPassword = this.state.newUserData.confirmPassword;\n                if (confirmPassword === data.password && !this.existUsername(data.userName)\n                    && !this.existEmail(data.email)) {\n                    let request = new Request('api/user-info/post', {\n                        method: 'POST',\n                        headers: new Headers({ 'Content-Type': 'application/json' }),\n                        body: JSON.stringify(data)\n                    });\n\n                    fetch(request)\n                        .then(function(response) {\n                            response.json().then(function(data) {\n                            })\n                    });\n                    this.registerSucceedChild.current.handleOpen();\n                } else {\n                    let erroInfo = '';\n                    if (data.userName === '') {\n                        erroInfo = 'Username cannot be empty!';\n                    }\n                    else if (this.existUsername(data.userName)) {\n                        erroInfo = 'The username is registered by the other person!';\n                    }\n                    else if (this.existEmail(data.email)) {\n                        erroInfo = 'The email is used by the other person!';\n                    }\n                    else if (data.password !== data.confirmPassword) {\n                        erroInfo = 'The password and the reentered Password are different!';\n                    }\n                    this.setState({ newUserData: {\n                        userName: data.userName,\n                        password: data.password,\n                        confirmPassword: confirmPassword,\n                        email: data.email,\n                        erroInfo: erroInfo\n                    }});\n                    this.invalidNewUserErrorChild.current.handleOpen();\n                    this.setState({ newUserData: {\n                        userName: '',\n                        password: '',\n                        confirmPassword: '',\n                        email: '',\n                        erroInfo: this.state.newUserData.erroInfo\n                    }});\n                }\n            })\n            .catch(err => console.log(err))\n    }\n\n    existUsername(username) {\n        let exist = false;\n        for (let itemInd in this.state.items) {\n            let each = this.state.items[itemInd];\n            if (each.userName === username) {\n                exist = true;\n            }\n        }\n        return exist;\n    }\n\n    existEmail(email) {\n        let exist = false;\n        for (let itemInd in this.state.items) {\n            let each = this.state.items[itemInd];\n            if (each.email === email) {\n                exist = true;\n            }\n        }\n        return exist;\n    }\n\n    addNewAccount(event) {\n        event.preventDefault();\n        this.checkUserInfoAndAdd();\n    }\n\n    render() {\n        return (\n            <div className=\"newUser\">\n                <br />\n                <InvalidNewUserView ref={this.invalidNewUserErrorChild} errInfo={this.state.newUserData.erroInfo}/>\n                <RegisterSucceedView ref={this.registerSucceedChild}/>\n                <h2 className=\"title\" align=\"center\">New User</h2>\n                <br />\n                <form className=\"eventForm\" onSubmit={this.addNewAccount}>\n                    <TextField\n                        required\n                        label=\"User Name\"\n                        margin=\"dense\"\n                        className=\"registerText\"\n                        value={this.state.newUserData.userName}\n                        onChange={this.handleEventChange('userName')}\n                        InputLabelProps={{ shrink: true }}\n                    />\n                    <br />\n                    <TextField\n                        required\n                        label=\"Email\"\n                        margin=\"dense\"\n                        className=\"registerText\"\n                        type=\"email\"\n                        value={this.state.newUserData.email}\n                        onChange={this.handleEventChange('email')}\n                        InputLabelProps={{ shrink: true }}\n                    />\n                    <br />\n                    <TextField\n                        required\n                        label=\"Password\"\n                        type={this.state.showPassword ? 'text' : 'password'}\n                        margin=\"dense\"\n                        className=\"registerText\"\n                        value={this.state.newUserData.password}\n                        onChange={this.handleEventChange('password')}\n                        InputLabelProps={{ shrink: true }}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"Toggle password visibility\"\n                                        onClick={this.handleClickShowPassword}\n                                    >\n                                        {this.state.showPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </InputAdornment>\n                          ),\n                        }}\n                    />\n                    <br />\n                    <TextField\n                        required\n                        label=\"Confirm Password\"\n                        type={this.state.showPassword ? 'text' : 'password'}\n                        margin=\"dense\"\n                        className=\"registerText\"\n                        value={this.state.newUserData.confirmPassword}\n                        onChange={this.handleEventChange('confirmPassword')}\n                        InputLabelProps={{ shrink: true }}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        edge=\"end\"\n                                        aria-label=\"Toggle password visibility\"\n                                        onClick={this.handleClickShowPassword}\n                                    >\n                                        {this.state.showPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </InputAdornment>\n                          ),\n                        }}\n                    />\n                    <br /> <br />\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons\"\n                        type=\"button\"\n                        onClick={() => this.ChangeView('/')}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons\"\n                        type=\"submit\"\n                        color=\"primary\"\n                    >\n                        Register\n                    </Button>\n                </form>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}