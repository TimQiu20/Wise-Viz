{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\src\\\\components\\\\Comments.js\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport './component_style/PostContent.css';\nimport ChangePageView from './ChangePage';\nimport { navigate } from 'react-mini-router';\nimport Moment from 'react-moment';\n\nvar Comments =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Comments, _React$Component);\n\n  _createClass(Comments, [{\n    key: \"ChangeView\",\n    value: function ChangeView(page) {\n      navigate(page);\n    }\n  }]);\n\n  function Comments(props) {\n    var _this;\n\n    _classCallCheck(this, Comments);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Comments).call(this, props));\n    _this.state = {\n      post: _this.props.clickedPost,\n      hasTable: _this.props.clickedPost.comment,\n      comments: [],\n      numOfComments: 0,\n      currentPage: 1,\n      numOfPages: 0,\n      currentShownComments: [],\n      buttons: []\n    };\n    _this.getComments = _this.getComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getPageButtons = _this.getPageButtons.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateCurrentComments = _this.updateCurrentComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updataComments = _this.updataComments.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.changePageChild = React.createRef();\n    _this.commentPost = _this.commentPost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getRelativeTime = _this.getRelativeTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteComment = _this.deleteComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Comments, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.state.hasTable) {\n        this.getComments();\n      }\n    }\n  }, {\n    key: \"deleteComment\",\n    value: function deleteComment(commentID) {\n      var _this2 = this;\n\n      var data = {\n        commentID: commentID,\n        postID: this.state.post.postID\n      };\n      var request = new Request('/api/comment-info/delete', {\n        method: 'DELETE',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify(data)\n      });\n      fetch(request).then(function (response) {\n        return response.json();\n      }).then(function () {\n        return _this2.getComments();\n      }).then(function () {\n        return _this2.ChangeView('/postContent');\n      });\n    }\n  }, {\n    key: \"getComments\",\n    value: function getComments() {\n      var _this3 = this;\n\n      var data = {\n        id: this.state.post.postID\n      };\n      var request = new Request('api/comment-info/get', {\n        method: 'POST',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify(data)\n      });\n      fetch(request).then(function (response) {\n        return response.json();\n      }).then(function (items) {\n        return _this3.setState({\n          comments: items\n        });\n      }).then(function () {\n        var numOfComments = _this3.state.comments.length;\n        var numOfPages = Math.ceil(numOfComments / 6);\n\n        if (numOfPages === 0) {\n          numOfPages = 1;\n        }\n\n        var currentShownComments = [];\n\n        for (var i = 6 * (_this3.state.currentPage - 1); i < 6 * _this3.state.currentPage && i < numOfComments; i++) {\n          var comment = _this3.state.comments[i];\n          currentShownComments[i] = comment;\n        }\n\n        _this3.setState({\n          numOfComments: numOfComments,\n          numOfPages: numOfPages,\n          currentShownComments: currentShownComments\n        });\n\n        _this3.getPageButtons();\n      });\n    }\n  }, {\n    key: \"updataComments\",\n    value: function updataComments(b) {\n      var currentShownComments = [];\n\n      for (var i = 6 * (b - 1); i < 6 * b && i < this.state.numOfComments; i++) {\n        var comment = this.state.comments[i];\n        currentShownComments[i] = comment;\n      }\n\n      this.setState({\n        currentShownComments: currentShownComments\n      });\n      this.getPageButtons(b);\n    }\n  }, {\n    key: \"updateCurrentComments\",\n    value: function updateCurrentComments(b) {\n      this.setState({\n        currentPage: b\n      });\n      this.updataComments(b);\n    }\n  }, {\n    key: \"getPageButtons\",\n    value: function getPageButtons(b) {\n      if (b == null) {\n        b = 1;\n      }\n\n      var totalPages = this.state.numOfPages;\n      var currentPage = b;\n      var buttons = [];\n      buttons[0] = 1;\n      var index = 1;\n\n      for (var i = currentPage - 2 > 1 ? currentPage - 2 : 2; i <= currentPage + 2 && i <= totalPages; i++) {\n        if (buttons[index - 1] + 1 !== i) {\n          buttons[index] = '...';\n          index++;\n        }\n\n        buttons[index] = i;\n        index++;\n      }\n\n      if (buttons[index - 1] !== totalPages) {\n        if (buttons[index - 1] !== totalPages - 1) {\n          buttons[index] = '...';\n          buttons[index + 1] = totalPages;\n        } else {\n          buttons[index] = totalPages;\n        }\n      }\n\n      this.setState({\n        buttons: buttons\n      });\n    }\n  }, {\n    key: \"commentPost\",\n    value: function commentPost() {\n      if (this.props.user) {\n        if (!this.state.hasTable) {\n          var data = {\n            id: this.state.post.postID\n          };\n          var request = new Request('/api/comment-info/create-table', {\n            method: 'POST',\n            headers: new Headers({\n              'Content-Type': 'application/json'\n            }),\n            body: JSON.stringify(data)\n          });\n          fetch(request).then(function (response) {\n            return response.json();\n          });\n        }\n\n        var tempPost = this.state.post;\n        tempPost.comment = true;\n        this.props.updateClickedPost(tempPost);\n        this.props.reverseState();\n      } else {\n        this.ChangeView('/login');\n      }\n    }\n  }, {\n    key: \"getRelativeTime\",\n    value: function getRelativeTime(time) {\n      if (time) {\n        var temp = time.split(' ');\n        return temp[0] + \"T\" + temp[1] + \"-0000\";\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"commentHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Comments:\"), React.createElement(Button, {\n        className: \"commentBtn\",\n        onClick: function onClick() {\n          return _this4.commentPost();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Post Comment\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        className: \"grid\",\n        method: \"post\",\n        action: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(ChangePageView, {\n        ref: this.changePageChild,\n        choosePage: this.updateCurrentComments,\n        totalPages: this.state.numOfPages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), this.state.currentShownComments.map(function (comment, index) {\n        return React.createElement(\"article\", {\n          className: \"postArticle\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, React.createElement(\"fieldset\", {\n          className: \"postFieldset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"commentsLayout\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"postProfile\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"userInfoP\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, comment.user, \" |  \", React.createElement(Moment, {\n          fromNow: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, _this4.getRelativeTime(comment.time))), (_this4.props.user ? _this4.props.user.username : '') === comment.user && React.createElement(Button, {\n          className: \"deleteBtn\",\n          onClick: function onClick() {\n            return _this4.deleteComment(comment.commentID);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, \"Delete\")), React.createElement(\"hr\", {\n          className: \"hr\",\n          width: \"100%\",\n          color: \"#7986cb\",\n          size: 3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"postContent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, comment.content))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }));\n      })), React.createElement(\"div\", {\n        className: \"pageButtons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, this.state.buttons.map(function (b, index) {\n        if (b === _this4.state.currentPage) {\n          return React.createElement(Button, {\n            className: \"currentPageButton\",\n            key: index,\n            num: b,\n            variant: \"contained\",\n            onClick: function onClick() {\n              return _this4.updateCurrentComments(b);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194\n            },\n            __self: this\n          }, b);\n        } else if (b === '...') {\n          return React.createElement(Button, {\n            className: \"pageButton\",\n            key: index,\n            num: b,\n            variant: \"contained\",\n            onClick: function onClick() {\n              return _this4.changePageChild.current.handleOpen();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197\n            },\n            __self: this\n          }, b);\n        } else {\n          return React.createElement(Button, {\n            className: \"pageButton\",\n            key: index,\n            num: b,\n            variant: \"contained\",\n            onClick: function onClick() {\n              return _this4.updateCurrentComments(b);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, b);\n        }\n      }))));\n    }\n  }]);\n\n  return Comments;\n}(React.Component);\n\nexport { Comments as default };","map":{"version":3,"sources":["C:\\Users\\Ting\\Desktop\\job seeking\\my-app\\src\\components\\Comments.js"],"names":["React","Button","ChangePageView","navigate","Moment","Comments","page","props","state","post","clickedPost","hasTable","comment","comments","numOfComments","currentPage","numOfPages","currentShownComments","buttons","getComments","bind","getPageButtons","updateCurrentComments","updataComments","changePageChild","createRef","commentPost","getRelativeTime","deleteComment","commentID","data","postID","request","Request","method","headers","Headers","body","JSON","stringify","fetch","then","response","json","ChangeView","id","items","setState","length","Math","ceil","i","b","totalPages","index","user","tempPost","updateClickedPost","reverseState","time","temp","split","map","username","content","current","handleOpen","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport './component_style/PostContent.css';\nimport ChangePageView from './ChangePage';\nimport { navigate } from 'react-mini-router';\nimport Moment from 'react-moment';\n\nexport default class Comments extends React.Component {\n    ChangeView(page) {\n        navigate(page);\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            post: this.props.clickedPost,\n            hasTable: this.props.clickedPost.comment,\n            comments: [],\n            numOfComments: 0,\n            currentPage: 1,\n            numOfPages: 0,\n            currentShownComments: [],\n            buttons: [],\n        }\n        this.getComments = this.getComments.bind(this);\n        this.getPageButtons = this.getPageButtons.bind(this);\n        this.updateCurrentComments = this.updateCurrentComments.bind(this);\n        this.updataComments = this.updataComments.bind(this);\n        this.changePageChild = React.createRef();\n        this.commentPost = this.commentPost.bind(this);\n        this.getRelativeTime = this.getRelativeTime.bind(this);\n        this.deleteComment = this.deleteComment.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.state.hasTable) {\n            this.getComments();\n        }\n    }\n\n    deleteComment(commentID) {\n        let data = {\n            commentID: commentID,\n            postID: this.state.post.postID\n        }\n        let request = new Request('/api/comment-info/delete', {\n            method: 'DELETE',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n        fetch(request)\n            .then(response => response.json())\n            .then(() => this.getComments())\n            .then(() => this.ChangeView('/postContent'));\n    }\n\n    getComments() {\n        let data = { id:this.state.post.postID };\n        let request = new Request('api/comment-info/get', {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n        fetch(request)\n                .then(response => response.json())\n                .then(items => this.setState({ comments:items }))\n                .then(() => {\n                    let numOfComments = this.state.comments.length;\n                    let numOfPages = Math.ceil(numOfComments / 6);\n                    if (numOfPages === 0) {\n                        numOfPages = 1;\n                    }\n                    let currentShownComments = [];\n                    for (let i = 6 * (this.state.currentPage - 1); i < 6 * this.state.currentPage && i < numOfComments; i++) {\n                        let comment = this.state.comments[i];\n                        currentShownComments[i] = comment;\n                    }\n                    this.setState({\n                        numOfComments: numOfComments,\n                        numOfPages: numOfPages,\n                        currentShownComments: currentShownComments,\n                    });\n                    this.getPageButtons();\n                });\n    }\n\n    updataComments(b) {\n        let currentShownComments = [];\n        for (let i = 6 * (b - 1); i < 6 * b && i < this.state.numOfComments; i++) {\n            let comment = this.state.comments[i];\n            currentShownComments[i] = comment;\n        }\n        this.setState({\n            currentShownComments: currentShownComments,\n        });\n        this.getPageButtons(b);\n    }\n\n    updateCurrentComments(b) {\n        this.setState({ currentPage:b });\n        this.updataComments(b);\n    }\n\n    getPageButtons(b) {\n        if (b == null) {\n            b = 1;\n        }\n        let totalPages = this.state.numOfPages;\n        let currentPage = b;\n        let buttons = [];\n        buttons[0] = 1;\n        let index = 1;\n        for (let i = currentPage - 2 > 1 ? currentPage - 2 : 2 ; i <= currentPage + 2 && i <= totalPages; i++) {\n            if (buttons[index - 1] + 1 !== i) {\n                buttons[index] = '...';\n                index++;\n            }\n            buttons[index] = i;\n            index++;\n        }\n        if (buttons[index - 1] !== totalPages) {\n            if (buttons[index - 1] !== totalPages - 1) {\n                buttons[index] = '...';\n                buttons[index + 1] = totalPages;\n            } else {\n                buttons[index] = totalPages;\n            }\n        }\n        this.setState({ buttons:buttons });\n    }\n\n    commentPost() {\n        if (this.props.user) {\n            if (!this.state.hasTable) {\n                let data = { id:this.state.post.postID };\n                let request = new Request('/api/comment-info/create-table', {\n                    method: 'POST',\n                    headers: new Headers({ 'Content-Type': 'application/json' }),\n                    body: JSON.stringify(data)\n                });\n                fetch(request)\n                    .then(response => response.json());\n            }\n            let tempPost = this.state.post;\n            tempPost.comment = true;\n            this.props.updateClickedPost(tempPost);\n            this.props.reverseState();\n        } else {\n            this.ChangeView('/login');\n        }\n    }\n\n    getRelativeTime(time) {\n        if (time) {\n            let temp = time.split(' ');\n            return temp[0] + \"T\" + temp[1] + \"-0000\";\n        } else {\n            return '';\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <br />\n                <div>\n                    <h2 className=\"commentHeader\">Comments:</h2>\n                    <Button className=\"commentBtn\" onClick={() => this.commentPost()}>Post Comment</Button>\n                    <br /> <br />\n                    <form className=\"grid\" method=\"post\" action=\"\">\n                        <br/>\n                        <ChangePageView ref={this.changePageChild} choosePage={this.updateCurrentComments} totalPages={this.state.numOfPages} />\n                        {this.state.currentShownComments.map((comment, index) => (\n                            <article className=\"postArticle\" key={index}>\n                                <fieldset className=\"postFieldset\">\n                                    <div className=\"commentsLayout\">\n                                        <div className=\"postProfile\">\n                                            <p className=\"userInfoP\">{comment.user} |  <Moment fromNow>{this.getRelativeTime(comment.time)}</Moment></p>\n                                            { (this.props.user ? this.props.user.username : '') === comment.user && (\n                                                <Button className=\"deleteBtn\" onClick={() => this.deleteComment(comment.commentID)}>Delete</Button>\n                                            )}\n                                        </div>\n                                        <hr className=\"hr\" width=\"100%\" color=\"#7986cb\" size={3} />\n                                        <p className=\"postContent\">{comment.content}</p>\n                                    </div>\n                                </fieldset>\n                                <br/>\n                            </article>\n                        ))}\n                    </form>\n                    <div className=\"pageButtons\">\n                        {this.state.buttons.map((b, index) => {\n                            if (b === this.state.currentPage) {\n                                return (<Button className=\"currentPageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.updateCurrentComments(b)}>{b}</Button>)\n                            }\n                            else if (b === '...') {\n                                return (<Button className=\"pageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.changePageChild.current.handleOpen()}>{b}</Button>)\n                            }\n                            else {\n                                return (<Button className=\"pageButton\" key={index} num={b} variant=\"contained\" onClick={() => this.updateCurrentComments(b)}>{b}</Button>)\n                            }\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}