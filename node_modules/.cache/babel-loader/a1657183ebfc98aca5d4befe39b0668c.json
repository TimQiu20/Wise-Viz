{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ting\\\\Desktop\\\\job seeking\\\\my-app\\\\Wise-viz\\\\src\\\\components\\\\CreatePost.js\";\nimport React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport './component_style/MainPage.css';\nimport PostSucceedView from './PostSucceed';\n/**\n *\n *\n */\n\nvar CreatePost =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreatePost, _React$Component);\n\n  function CreatePost(props) {\n    var _this;\n\n    _classCallCheck(this, CreatePost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreatePost).call(this, props));\n\n    _this.handleEventChange = function (field) {\n      return function (event) {\n        var oldData = _this.state;\n        oldData[field] = event.target.value;\n\n        _this.setState({\n          newUserData: oldData,\n          error: false\n        });\n      };\n    };\n\n    _this.state = {\n      postTitle: '',\n      postContent: '',\n      username: '',\n      error: false\n    };\n    _this.checkPostAndPost = _this.checkPostAndPost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.postSucceedChild = React.createRef();\n    _this.getUsername = _this.getUsername.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CreatePost, [{\n    key: \"getUsername\",\n    value: function getUsername() {\n      var _this2 = this;\n\n      var data = {\n        email: this.props.user.email\n      };\n      var request = new Request('api/user-info/get-username', {\n        method: 'POST',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify(data)\n      });\n      fetch(request).then(function (response) {\n        return response.json();\n      }).then(function (item) {\n        _this2.setState({\n          username: item[0].userName\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUsername();\n    }\n  }, {\n    key: \"checkPostAndPost\",\n    value: function checkPostAndPost() {\n      if (this.state.postTitle === '') {\n        this.setState({\n          error: true\n        });\n      } else {\n        var date = new Date();\n        var data = {\n          postID: Math.random().toString(36).substr(2, 9),\n          title: this.state.postTitle,\n          content: this.state.postContent,\n          postTime: date.toISOString().slice(0, 19).replace('T', ' '),\n          email: this.props.user.email,\n          username: this.state.username,\n          url: this.props.user.url\n        };\n        var request = new Request('api/post-info/post', {\n          method: 'POST',\n          headers: new Headers({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify(data)\n        });\n        fetch(request).then(function (response) {\n          response.json().then(function (data) {});\n        });\n        this.postSucceedChild.current.handleOpen();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(PostSucceedView, {\n        ref: this.postSucceedChild,\n        handleCreatePostClose: this.props.handleCreatePostClose.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        className: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"New Post\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Post Title:\"), React.createElement(TextField, {\n        required: true,\n        error: this.state.error,\n        label: \"Post Title\",\n        variant: \"outlined\",\n        value: this.state.postTitle,\n        className: \"postTitleText\",\n        onChange: this.handleEventChange('postTitle'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Content:\"), React.createElement(\"textarea\", {\n        name: \"message\",\n        className: \"textarea\",\n        rows: \"10\",\n        cols: \"30\",\n        wrap: \"soft\",\n        value: this.state.postContent,\n        onChange: this.handleEventChange('postContent'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        className: \"postButtons\",\n        onClick: function onClick() {\n          return _this3.props.handleCreatePostClose();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: \"postButtons\",\n        onClick: this.checkPostAndPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Post\"))));\n    }\n  }]);\n\n  return CreatePost;\n}(React.Component);\n\nexport { CreatePost as default };","map":{"version":3,"sources":["C:\\Users\\Ting\\Desktop\\job seeking\\my-app\\Wise-viz\\src\\components\\CreatePost.js"],"names":["React","Button","TextField","PostSucceedView","CreatePost","props","handleEventChange","field","event","oldData","state","target","value","setState","newUserData","error","postTitle","postContent","username","checkPostAndPost","bind","postSucceedChild","createRef","getUsername","data","email","user","request","Request","method","headers","Headers","body","JSON","stringify","fetch","then","response","json","item","userName","date","Date","postID","Math","random","toString","substr","title","content","postTime","toISOString","slice","replace","url","current","handleOpen","handleCreatePostClose","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport './component_style/MainPage.css';\nimport PostSucceedView from './PostSucceed';\n\n/**\n *\n *\n */\nexport default class CreatePost extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postTitle: '',\n            postContent: '',\n            username: '',\n            error: false,\n        }\n        this.checkPostAndPost = this.checkPostAndPost.bind(this);\n        this.postSucceedChild = React.createRef();\n        this.getUsername = this.getUsername.bind(this);\n    }\n\n    handleEventChange = field => event => {\n        const oldData = this.state;\n        oldData[field] = event.target.value;\n        this.setState({\n            newUserData: oldData,\n            error: false,\n        });\n    }\n\n    getUsername() {\n        let data = { email: this.props.user.email};\n        let request = new Request('api/user-info/get-username', {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        });\n\n        fetch(request)\n            .then(response => response.json())\n            .then(item => {\n                this.setState({ username:item[0].userName })\n            });\n    }\n\n    componentDidMount() {\n        this.getUsername();\n    }\n\n    checkPostAndPost() {\n        if (this.state.postTitle === '') {\n            this.setState({ error:true });\n        } else {\n            let date = new Date();\n            let data = {\n                postID: Math.random().toString(36).substr(2, 9),\n                title: this.state.postTitle,\n                content: this.state.postContent,\n                postTime: date.toISOString().slice(0, 19).replace('T', ' '),\n                email: this.props.user.email,\n                username: this.state.username,\n                url: this.props.user.url,\n            };\n            let request = new Request('api/post-info/post', {\n                method: 'POST',\n                headers: new Headers({ 'Content-Type': 'application/json' }),\n                body: JSON.stringify(data)\n            });\n\n            fetch(request)\n                .then(function(response) {\n                    response.json().then(function(data) {\n                    })\n            });\n            this.postSucceedChild.current.handleOpen();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <PostSucceedView ref={this.postSucceedChild} handleCreatePostClose={this.props.handleCreatePostClose.bind(this)}/>\n                <form className=\"grid\">\n                    <fieldset className=\"fieldset\">\n                        <legend>\n                            New Post\n                        </legend>\n                        <h2>Post Title:</h2>\n                        <TextField\n                            required\n                            error={this.state.error}\n                            label=\"Post Title\"\n                            variant=\"outlined\"\n                            value={this.state.postTitle}\n                            className=\"postTitleText\"\n                            onChange={this.handleEventChange('postTitle')}\n                        />\n                        <br />\n                        <h2>Content:</h2>\n                        <textarea\n                            name=\"message\"\n                            className=\"textarea\"\n                            rows=\"10\"\n                            cols=\"30\"\n                            wrap=\"soft\"\n                            value={this.state.postContent}\n                            onChange={this.handleEventChange('postContent')}\n                        >\n                        </textarea>\n                        <br/><br/>\n                        <Button variant=\"contained\" color=\"secondary\" className=\"postButtons\" onClick={() => this.props.handleCreatePostClose()}>Cancel</Button>\n                        <Button variant=\"contained\" color=\"primary\" className=\"postButtons\" onClick={this.checkPostAndPost}>Post</Button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}